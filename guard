#!/usr/bin/env python

import argparse
import subprocess
import sys

def main():
    args = parse_args()
    try:
        guard(args)
    except KeyboardInterrupt:
        pass

def guard(args):
    checked_run(args.init)
    if args.run_command_on_start:
        checked_run(args.command)

    watch(args.files).then(lambda changed_file: [
        checked_run(args.command),
    ])

def parse_args():
    # TODO: add loging level and allow to hide command output
    # TODO: allow to specify unique command for each file, like -u 'test {}'
    parser = argparse.ArgumentParser(description='Run commands on files changes.')
    parser.add_argument('files', metavar='FILES', type=str, nargs='+', help='files to watch')
    parser.add_argument('-c', '--command', metavar='COMMAND', type=str, nargs='+', required=True, help='command to run on files changes')
    parser.add_argument('-s', '--run-command-on-start', action='store_const', const=True, default=False, help='run main command on guard init')
    parser.add_argument('-i', '--init', metavar='INIT_COMMAND', type=str, nargs='+', help='command to run on guard init')

    return parser.parse_args()

def checked_run(command):
    if command is not None:
        run(command)

def run(command):
    # TODO: check command result and log on errors
    subprocess.call(' '.join(command), shell=True)

def watch(files):
    class Watcher:
        def __init__(self, files):
            self.files = files

        def then(self, callback):
            while True:
                changed_files = self.wait_for_changes()
                # TODO: use async callback
                callback(changed_files)

        def wait_for_changes(self):
            cmd = ['inotifywait', '-e', 'modify', '--'] + self.files
            opts = {
                'stderr': subprocess.DEVNULL,
            }
            output = subprocess.check_output(cmd, **opts)
            return self.extract_changed_file(output)

        def extract_changed_file(self, inotify_output):
            return inotify_output.decode()[:-9]

    return Watcher(files)

if __name__ == '__main__':
    main()
